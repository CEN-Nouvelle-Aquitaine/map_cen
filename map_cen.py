# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapCEN
                                 A QGIS plugin
 Mise en page automatique (ajout de la légende, d'une barre d'échelle, de la flèche du nord, d'un titre) d'un projet QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Romain Montillet
        email                : r.montillet@cen-na.org
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from PyQt5 import *
from PyQt5.QtCore import Qt
from qgis.core import *
from qgis.gui import *
from qgis.utils import *
from qgis.PyQt.QtXml import QDomDocument
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .map_cen_dialog import MapCENDialog
import os.path
import urllib
import csv
import io

from datetime import date


from .carto_perimetres_ecologiques import module_perim_eco
from .carto_localisation_generale import module_loc_generale

class Popup(QWidget):
    def __init__(self, parent=None):
        super(Popup, self).__init__(parent)

        self.plugin_dir = os.path.dirname(__file__)

        self.text_edit = QTextBrowser()
        fp = urllib.request.urlopen("https://raw.githubusercontent.com/CEN-Nouvelle-Aquitaine/map_cen/main/info_changelog.html")
        mybytes = fp.read()
        html_changelog = mybytes.decode("utf8")
        fp.close()

        self.text_edit.setHtml(html_changelog)
        self.text_edit.setFont(QtGui.QFont("Calibri",weight=QtGui.QFont.Bold))
        self.text_edit.anchorClicked.connect(QtGui.QDesktopServices.openUrl)
        self.text_edit.setOpenLinks(False)

        self.text_edit.setWindowTitle("Nouveautés")
        self.text_edit.setMinimumSize(600,300)

class OptionsWindow(QWidget):
    def __init__(self, parent=None):
        super(OptionsWindow, self).__init__(parent)

        self.setWindowTitle("Options d'export")
        self.setMinimumSize(300,200)
        self.setMaximumSize(300,200)

        titre = QLabel(self)
        titre.setFont(QtGui.QFont("Calibri",weight=QtGui.QFont.Bold))
        titre.move(70, 20)
        titre.setText("Résolution de la carte à exporter :")
        a = QPushButton("Haute résolution", self)
        a.move(90, 50)
        a.setMinimumSize(120, 25)
        a.setMaximumSize(120, 25)
        b = QPushButton("Moyenne résolution", self)
        b.move(90, 90)
        b.setMinimumSize(120, 25)
        b.setMaximumSize(120, 25)
        c = QPushButton("Basse résolution", self)
        c.move(90, 130)
        c.setMinimumSize(120, 25)
        c.setMaximumSize(120, 25)

        a.clicked.connect(lambda: self.set_resolution(300))
        b.clicked.connect(lambda: self.set_resolution(200))
        c.clicked.connect(lambda: self.set_resolution(100))

        # OptionsWindow().exec_()

    def set_resolution(self, resolution):
        self.a = resolution
        MapCEN.export(self)
        self.close()


class MapCEN:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface


        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapCEN_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MapCEN')
        self.dlg = MapCENDialog()

        self.module_perim_eco = module_perim_eco()
        self.module_perim_eco.dlg = self.dlg

        self.module_loc_generale = module_loc_generale()
        self.module_loc_generale.dlg = self.dlg

        # module_perim_eco.dlg = self.dlg
        self.plugin_path = os.path.dirname(__file__)


        self.dlg.commandLinkButton.clicked.connect(self.chargement_qpt)

        self.dlg.comboBox_3.currentIndexChanged.connect(self.initialisation)
        self.dlg.commandLinkButton_3.clicked.connect(self.popup_info)
        self.dlg.pushButton.clicked.connect(self.ajout_couches)
        self.dlg.commandLinkButton_4.clicked.connect(self.actualisation_emprise)


        self.dlg.commandLinkButton_5.clicked.connect(self.ouverture_composeur)
        self.dlg.commandLinkButton_6.clicked.connect(self.popup_resolution)

        # self.default_project_scale = self.iface.mapCanvas().scale()
        # print("echelle par défaut à l'initilaisation du plugin", self.default_project_scale)

        self.dlg.graphicsView.scale(2.1,2.1)
        self.dlg.graphicsView.setMouseTracking(True)

        self.dlg.horizontalSlider.valueChanged.connect(self.niveau_zoom)
        self.dlg.mComboBox_4.checkedItemsChanged.connect(self.choix_dept)

        self.dlg.comboBox.currentIndexChanged.connect(self.liste_couche_template)

        self.dlg.mComboBox_3.hide()

        self.dlg.comboBox_3.addItems(["MFU", "Localisation de sites", "Périmètres écologiques"])

        self.dlg.comboBox_3.model().item(0).setEnabled(False)
        # self.dlg.lineEdit.textChanged.connect(self.onTextChanged)

        self.dlg.checkBox.stateChanged.connect(self.ajout_code_sites)

        self.dlg.setMouseTracking(True)
        # self.dlg.mComboBox_4.setEnabled(False)

        self.movie = QMovie(
            str(self.plugin_path) + "/underconstruction.gif")  # récupération du gif via le chemin relatif du plugin
        self.dlg.label_11.setMovie(self.movie)
        self.movie.start()

        tool = QgsMapToolPan(self.iface.mapCanvas())
        tool.canvasReleaseEvent = lambda event: self.function_from_plugin(event)
        self.iface.mapCanvas().setMapTool(tool)

        ## On ajoute le nom des templates à la liste déroulante de l'onglet "mises en page" :
        mises_en_page = []

        for filename in glob.glob(self.plugin_path + "/mises_en_pages/*.qpt"):
            mises_en_page.append(filename)


        for i, filename in enumerate(mises_en_page):
            nom_fichier = os.path.basename(filename)
            self.dlg.comboBox.addItem(nom_fichier)


        self.dlg.radioButton_6.setChecked(True)
        self.dlg.radioButton_7.setChecked(True)


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapCEN', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.
        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str
        :param text: Text that should be shown in menu items for this action.
        :type text: str
        :param callback: Function to be called when the action is triggered.
        :type callback: function
        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool
        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool
        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str
        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.
        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/map_cen/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MapCEN'),
                action)
            self.iface.removeToolBarIcon(action)

    def function_from_plugin(self, event):
        print(self.my_map1.scale())


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def choix_dept(self):

        self.listes_sites_MFU_filtered = []

        departement = self.dlg.mComboBox_4.checkedItems()

        departements_selection = []

        for item in departement:
            departements_selection.append(item[0:2])

        expression_filtre = None  # initialize with a default value

        if len(self.dlg.mComboBox_4.checkedItems()) == 1:
            expression_filtre = 'substr("codesite",1,2) = %s' % str(departements_selection[0])
        if len(self.dlg.mComboBox_4.checkedItems()) >= 2 :
            expression_filtre = 'substr("codesite",1,2) IN %s' % str(tuple(departements_selection))
        if len(self.dlg.mComboBox_4.checkedItems()) > 3 :
            QMessageBox.question(iface.mainWindow(), u"Attention !",
                                 "Aucun site ne peut être à cheval sur plus de 3 départements, veuillez limiter la sélection à 3 sites !",
                                 QMessageBox.Ok)


        if self.dlg.mComboBox_4.currentIndex != -1:
            for p in self.vlayer.getFeatures(QgsFeatureRequest().setFilterExpression(expression_filtre)):
                if self.dlg.checkBox.isChecked():
                    self.listes_sites_MFU_filtered.append(str(p.attributes()[0]))
                else:
                    self.listes_sites_MFU_filtered.append(str(p.attributes()[1]))
            print("yes")
            print(self.vlayer.selectedFeatures())

        else:
            for p in self.vlayer.getFeatures():
                if self.dlg.checkBox.isChecked():
                    self.listes_sites_MFU_filtered.append(str(p.attributes()[0]))
                else:
                    self.listes_sites_MFU_filtered.append(str(p.attributes()[1]))
            print("non")
            print(self.vlayer.selectedFeatures()[0])

        # print(self.dlg.mComboBox.checkedItems())
        # print(self.vlayer.selectedFeatures()[0])
        # print(self.vlayer.selectedFeatures()[0]["codesite"][:2])

        self.dlg.mComboBox.clear()

        self.listes_sites_MFU_filtered.sort()

        self.dlg.mComboBox.addItems(self.listes_sites_MFU_filtered)

    def initialisation(self):

        self.dlg.radioButton.setChecked(True)
        self.dlg.radioButton.setEnabled(True)
        self.dlg.radioButton_2.setEnabled(True)
        self.dlg.radioButton_3.setEnabled(True)


        if self.dlg.comboBox_3.currentText() == "Périmètres écologiques" :
            
            self.module_perim_eco.initialisation()

        elif self.dlg.comboBox_3.currentText() == "Localisation de sites" :
            
            self.module_loc_generale.initialisation()

        else:

            self.dlg.mComboBox_3.hide()
            self.dlg.label_15.hide()

        # Lecture de l'authentification QGIS. Si pas d'authentification alors message d'erreur :
        managerAU = QgsApplication.authManager()
        self.k = managerAU.availableAuthMethodConfigs().keys()
        # print(self.k)
        if len(list(self.k)) == 0:
            QMessageBox.question(iface.mainWindow(), u"Attention !",
                                 "Veuillez ajouter une entrée de configuration d'authentification dans QGIS pour accéder aux flux CEN-NA sécurisés par un mot de passe",
                                 QMessageBox.Ok)

        # La couche "site géré" est une donnée protégée donc lecture de l'entrée d'authentification pour pouvoir la charger dans QGIS :
        uri = ['https://opendata.cen-nouvelle-aquitaine.org/geoserver/fonciercen/wfs?VERSION=1.0.0&TYPENAME=fonciercen:site_gere_poly&SRSNAME=EPSG:4326&authcfg=',list(self.k)[0], '&request=GetFeature']
        uri = ''.join(uri)

        self.vlayer = QgsVectorLayer(uri, "Sites gérés CEN-NA", "WFS")

        if QgsProject.instance().mapLayersByName("Sites gérés CEN-NA"):
            # self.vlayer = QgsProject.instance().mapLayersByName("Sites gérés CEN-NA")[0]
            iface.messageBar().pushMessage("Couche 'Sites gérés CEN-NA'",
                                           "La couche 'Sites gérés CEN-NA est déjà chargée dans le canvas QGIS",
                                           level=Qgis.Success, duration=5)
        else:
            QgsProject.instance().addMapLayer(self.vlayer)
        if not self.vlayer:
            QMessageBox.question(iface.mainWindow(), u"Erreur !",
                                 "Impossible de charge la couche 'Sites gérés CEN-NA', veuillez contacter le pôle DSI !",
                                 QMessageBox.Ok)

        self.listes_sites_MFU = []

        for p in self.vlayer.getFeatures():
            self.listes_sites_MFU.append(str(p.attributes()[1]))

        # completer = QCompleter(self.listes_sites_MFU)
        # completer.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        # completer.setFilterMode(Qt.MatchContains)
        # self.dlg.lineEdit.setCompleter(completer)

        # self.dlg.mComboBox.setLineEdit(self.dlg.lineEdit)
        self.dlg.mComboBox.addItems(self.listes_sites_MFU)

        #On clear les combobox ici car à chaque fois que la comboBox_3 est sélectionné cela lance la fonction "intialisation" du script principal "map_cen.py" et les lignes suivantes sont donc ré-éxécutées (duplicats de départements et de site à chaque fois)
        self.listes_sites_MFU.clear()
        self.dlg.mComboBox_4.clear()

        dpts_NA = ["16 - Charente", "17 - Charente-Maritime", "19 - Corrèze", "23 - Creuse", "24 - Dordogne",
                   "33 - Gironde", "40 - Landes", "47 - Lot-et-Garonne", "64 - Pyrénées-Atlantique", "79 - Deux-Sèvres",
                   "86 - Vienne", "87 - Haute-Vienne"]

        self.dlg.mComboBox_4.addItems(dpts_NA)

        self.dlg.commandLinkButton_4.setEnabled(False)


    def ajout_code_sites(self):

        # self.listes_sites_MFU.clear()
        # self.dlg.mComboBox.clear()

        if self.dlg.checkBox.isChecked():
            for p in self.vlayer.getFeatures():
                self.listes_sites_MFU.append(str(p.attributes()[0]))  #ne pas chopper la colonne par index mais par son nom (plus propre) à faire !!!!!!!!!!!!!!!!!

        else:
            for p in self.vlayer.getFeatures():
                self.listes_sites_MFU.append(str(p.attributes()[1]))

        self.dlg.mComboBox.addItems(self.listes_sites_MFU)

        self.choix_dept()

    def ajout_couches(self):

        self.dlg.commandLinkButton_4.setEnabled(True)

        ### -------------------- Chargement des sites fonciercen ---------------------- ###

        uri = ['https://opendata.cen-nouvelle-aquitaine.org/geoserver/fonciercen/wfs?VERSION=1.0.0&TYPENAME=fonciercen:mfu_cenna&SRSNAME=EPSG:4326&authcfg=', list(self.k)[0], '&request=GetFeature']
        uri = ''.join(uri)

        # méthode plus rapide pour charger layer que QgsProject.instance().addMapLayer(layer) :
        if QgsProject.instance().mapLayersByName("Parcelles CEN NA en MFU"):
            self.layer = QgsProject.instance().mapLayersByName("Parcelles CEN NA en MFU")[0]
            iface.messageBar().pushMessage("Couche 'Parcelles CEN NA en MFU'", "La couche 'Parcelles CEN NA en MFU' est déjà chargée dans le canvas QGIS", level=Qgis.Success, duration=5)

        else:
            self.layer = iface.addVectorLayer(uri, "Parcelles CEN NA en MFU", "WFS")

        if not self.layer:
            # QMessageBox.question(iface.mainWindow(), u"Erreur !", "Impossible de charger la couche %s, veuillez contacter le pôle DSI !" % self.dlg.comboBox.currentText(), QMessageBox.Ok)
            QMessageBox.question(iface.mainWindow(), u"Erreur !", "Impossible de charger la couche 'Parcelles CEN NA en MFU', veuillez contacter le pôle DSI !", QMessageBox.Ok)

        self.layer.loadNamedStyle(self.plugin_path + '/styles_couches/mfu_cenna.qml')
        self.layer.triggerRepaint()


        if QgsProject.instance().mapLayersByName("Département"):
            self.depts_NA = QgsProject.instance().mapLayersByName("Département")[0]
            iface.messageBar().pushMessage("Couche 'Département'", "La couche 'Département' est déjà chargée dans le canvas QGIS", level=Qgis.Success, duration=5)

        else:
            self.depts_NA = iface.addVectorLayer(
            "https://opendata.cen-nouvelle-aquitaine.org/administratif/wfs?VERSION=1.0.0&TYPENAME=administratif:departement&SRSNAME=EPSG:4326&request=GetFeature",
            "Département", "WFS")
        if not self.depts_NA:
            QMessageBox.question(iface.mainWindow(), u"Erreur !", "Impossible de charge la couche 'Département', veuillez contacter le pôle DSI !", QMessageBox.Ok)


        if self.dlg.comboBox_3.currentText() == "Périmètres écologiques":

            self.module_perim_eco.chargement_perim_eco()

        else:
            return None

        single_symbol_renderer = self.depts_NA.renderer()

        symbol = single_symbol_renderer.symbol()
        symbol.setColor(QColor.fromRgb(255, 0, 0, 0))

    def onTextChanged(self, filter_text):

        filtered_sites_MFU = [item for item in self.listes_sites_MFU if item.lower().startswith(filter_text.lower())]

        checked_items = self.dlg.mComboBox.checkedItems()

        self.dlg.mComboBox.addItems(filtered_sites_MFU)

        # retain checked items
        for checked_item in checked_items:
            index = self.dlg.mComboBox.findText(checked_item)
            if index > -1:
                self.dlg.mComboBox.setItemCheckState(index, Qt.Checked)

    def actualisation_emprise(self):

        if len(self.dlg.mComboBox.checkedItems()) < 1:
            QMessageBox.question(iface.mainWindow(), u"Attention !", "Veuillez sélectionner au moins un site CEN !", QMessageBox.Ok)

        else :
                
            self.vlayer.removeSelection()
            self.layer.removeSelection()

            # if self.dlg.lineEdit.text() not in self.listes_sites_MFU:
            #     QMessageBox.question(iface.mainWindow(), u"Nom de site invalide", "Renseigner un nom de site CEN-NA valide !", QMessageBox.Ok)

            ### -------------------- Choix et ajout des fonds de carte ---------------------- ###

            if self.dlg.radioButton.isChecked() == True:
                uri = "url=https://wxs.ign.fr/ortho/geoportail/r/wms&service=WMS+Raster&version=1.3.0&crs=EPSG:2154&format=image/png&layers=HR.ORTHOIMAGERY.ORTHOPHOTOS&styles"
                # tms = 'type=xyz&zmin=0&zmax=20&url=https://mt1.google.com/vt/lyrs%3Ds%26x%3D{x}%26y%3D{y}%26z%3D{z}'
                self.fond = QgsRasterLayer(uri, "Fond ortho IGN 2021", 'wms')

                if not QgsProject.instance().mapLayersByName("Fond ortho IGN 2021"):
                    QgsProject.instance().addMapLayer(self.fond)
                else:
                    print("Le fond de carte 'Fond ortho IGN 2021' est déjà chargé")

                fond_carte = QgsProject.instance().mapLayersByName("Fond ortho IGN 2021")[0]

            else :
                for lyr in QgsProject.instance().mapLayers().values():
                    if lyr.name() == "Fond ortho IGN 2021":
                        QgsProject.instance().removeMapLayers([lyr.id()])


            if self.dlg.radioButton_2.isChecked() == True:

                tms = 'type=xyz&url=https://tile.openstreetmap.org/{z}/{x}/{y}.png&zmax=19&zmin=0'
                self.fond = QgsRasterLayer(tms, 'OSM', 'wms')

                if not QgsProject.instance().mapLayersByName("OSM"):
                    QgsProject.instance().addMapLayer(self.fond)
                else:
                    print("Le fond de carte OSM est déjà chargé")

                fond_carte = QgsProject.instance().mapLayersByName("OSM")[0]

            else :
                for lyr in QgsProject.instance().mapLayers().values():
                    if lyr.name() == "OSM":
                        QgsProject.instance().removeMapLayers([lyr.id()])


            if self.dlg.radioButton_3.isChecked() == True:

                uri = 'url=https://opendata.cen-nouvelle-aquitaine.org/geoserver/fond_carto/wms?service=WMS+Raster&version=1.0.0&crs=EPSG:2154&format=image/png&layers=SCAN25TOUR_PYR-JPEG_WLD_WM&styles'
                self.fond = QgsRasterLayer(uri, "SCAN25 IGN", "wms")

                if not QgsProject.instance().mapLayersByName("SCAN25 IGN"):
                    QgsProject.instance().addMapLayer(self.fond)
                else:
                    print("Le fond de carte SCAN25 IGN est déjà chargé")

                fond_carte = QgsProject.instance().mapLayersByName("SCAN25 IGN")[0]

            else :
                for lyr in QgsProject.instance().mapLayers().values():
                    if lyr.name() == "SCAN25 IGN":
                        QgsProject.instance().removeMapLayers([lyr.id()])


            if self.dlg.radioButton_4.isChecked() == True:

                uri = 'url=https://wxs.ign.fr/cartes/geoportail/r/wms&service=WMS+Raster&version=1.3.0&crs=EPSG:2154&format=image/png&layers=GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2&styles'
                self.fond = QgsRasterLayer(uri, "Plan IGN", "wms")

                if not QgsProject.instance().mapLayersByName("Plan IGN"):
                    QgsProject.instance().addMapLayer(self.fond)
                else:
                    print("Le fond de carte 'Plan IGN' est déjà chargé")

                fond_carte = QgsProject.instance().mapLayersByName("Plan IGN")[0]

            else :
                for lyr in QgsProject.instance().mapLayers().values():
                    if lyr.name() == "Plan IGN":
                        QgsProject.instance().removeMapLayers([lyr.id()])

            # Ordre des couches dans gestionnaires couches : fond de carte sous les autres couches
            root = QgsProject.instance().layerTreeRoot()
            fond_carte = root.findLayer(fond_carte.id())
            myClone = fond_carte.clone()
            parent = fond_carte.parent()
            parent.insertChildNode(-1, myClone)
            parent.removeChildNode(fond_carte)

            # On place la couche "Parcelles MFU" en deuxième dans le gestionnaire des couches
            parcelles_MFU = root.findLayer(self.layer.id())
            myClone = parcelles_MFU.clone()
            parent = parcelles_MFU.parent()
            parent.insertChildNode(1, myClone)
            parent.removeChildNode(parcelles_MFU)

            # On place la couche "Depts_NA" en première dans le gestionnaire des couches
            departements_NA = root.findLayer(self.depts_NA.id())
            myClone = departements_NA.clone()
            parent = departements_NA.parent()
            parent.insertChildNode(0, myClone)
            parent.removeChildNode(departements_NA)

            # ### Zoom sur emprise du ou des sites CEN selectionnés:

            for sites in self.dlg.mComboBox.checkedItems():
                if self.dlg.checkBox.isChecked():
                    self.vlayer.selectByExpression('"codesite"= \'{0}\''.format(sites.replace("'", "''")), QgsVectorLayer.AddToSelection)
                else:
                    self.vlayer.selectByExpression('"nom_site"= \'{0}\''.format(sites.replace("'", "''")), QgsVectorLayer.AddToSelection)

            iface.mapCanvas().zoomToSelected(self.vlayer)

            QgsProject.instance().setCrs(QgsCoordinateReferenceSystem(2154))


            rules = (
                ('Site CEN sélectionné', "is_selected()", 'red'),
            )

            # create a new rule-based renderer
            symbol = QgsSymbol.defaultSymbol(self.vlayer.geometryType())
            renderer = QgsRuleBasedRenderer(symbol)

            # get the "root" rule
            root_rule = renderer.rootRule()

            for label, expression, color_name in rules:
                # create a clone (i.e. a copy) of the default rule
                rule = root_rule.children()[0].clone()
                # set the label, expression and color
                rule.setLabel(label)
                rule.setFilterExpression(expression)
                symbol_layer = rule.symbol().symbolLayer(0)
                color = symbol_layer.color()
                generator = QgsGeometryGeneratorSymbolLayer.create({})
                generator.setSymbolType(QgsSymbol.Marker)
                generator.setGeometryExpression("centroid($geometry)")
                generator.setColor(QColor('Red'))
                rule.symbol().setColor(QColor(color_name))
                # set the scale limits if they have been specified
                # append the rule to the list of rules
                rule.symbol().changeSymbolLayer(0, generator)
                root_rule.appendChild(rule)

            # delete the default rule
            root_rule.removeChildAt(0)

            # apply the renderer to the layer
            self.vlayer.setRenderer(renderer)
            # refresh the layer on the map canvas
            self.vlayer.triggerRepaint()

            sites_selectionnes = (','.join("'" + item.replace("'", "''") + "'" for item in self.dlg.mComboBox.checkedItems()))

            if len(self.dlg.mComboBox.checkedItems()) < 2:
                expr = "\"nom_site\" IS {0}".format(sites_selectionnes)
            else:
                expr = "\"nom_site\" IN ({0})".format(sites_selectionnes)

            if self.dlg.comboBox_3.currentText() == "Périmètres écologiques":
                self.module_perim_eco.mise_en_page()
            elif self.dlg.comboBox_3.currentText() == "Localisation de sites":
                self.module_loc_generale.mise_en_page()
            else:
                self.mise_en_page()


    def mise_en_page(self):

        self.dlg.horizontalSlider.setValue(0)

        # ajout de la date, l'auteur, source etc...
        date_du_jour = date.today().strftime("%d/%m/%Y")

        # QgsProject.instance().layerTreeRoot().findLayer(self.vlayer.id()).setItemVisibilityChecked(False)

        ## Ajout de la mise en page au composeur de carte:

        project = QgsProject.instance()
        self.manager = project.layoutManager()
        layout_name = 'Mise en page automatique MapCEN (MFU)'
        layouts_list = self.manager.printLayouts()
        # Just 4 debug
        # remove any duplicate layouts
        for self.layout in layouts_list:
            if self.layout.name() == layout_name:
                self.manager.removeLayout(self.layout)
            #     reply = QMessageBox.question(None, (u'Delete layout...'),
            #                                  (
            #                                      u"There's already a layout named '%s'\nDo you want to delete it?")
            #                                  % layout_name,
            #                                  QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            #     if reply == QMessageBox.No:
            #         return
            #     else:
            #         manager.removeLayout(layout)
            #         print((u"Previous layout names '%s' removed... ") % layout_name)

        self.layout = QgsPrintLayout(project)
        self.layout.initializeDefaults()
        # manager.addLayout(layout)
        self.layout.setName(layout_name)


        ## Add map to layout
        self.my_map1 = QgsLayoutItemMap(self.layout)

        # Charger une carte vide
        self.my_map1.setRect(20, 20, 20, 20)


        self.my_map1.setLayers([self.layer, self.fond])


        # Mettre le canvas courant comme emprise
        self.my_map1.setExtent(iface.mapCanvas().extent())

        # Position de la carte dans le composeur
        self.my_map1.attemptMove(QgsLayoutPoint(5, 23, QgsUnitTypes.LayoutMillimeters))

        #on dimensionne le rendu de la carte (pour référence la page totale est une page A4 donc 297*210)
        self.my_map1.attemptResize(QgsLayoutSize(185, 182, QgsUnitTypes.LayoutMillimeters))
        self.my_map1.refresh()

        self.my_map1.setBackgroundColor(QColor(255, 255, 255, 255))
        self.my_map1.setFrameEnabled(True)
        self.layout.addLayoutItem(self.my_map1)

        self.my_map1.setId("carte_principale_MFU")
        # print(self.my_map1.id())

        # --- create map item 2 (shapefile, raster 2, basemap)

        my_map2 = QgsLayoutItemMap(self.layout)
        my_map2.setRect(20, 20, 20, 20)
        my_map2.setPos(213, 28)
        my_map2.setFrameEnabled(False)

        my_map2.setLayers([self.vlayer, self.depts_NA])

        ## Ajustement de l'emprise de la couche depts_CEN-NA au CRS 2154 :

        crsSrc = QgsCoordinateReferenceSystem("EPSG:4326")

        # recherche du CRS du projet pour réaliser transformation (normalement 2154):
        crsDest = QgsCoordinateReferenceSystem(QgsCoordinateReferenceSystem("EPSG:2154"))
        transformContext = QgsProject.instance().transformContext()
        xform = QgsCoordinateTransform(crsSrc, crsDest, transformContext)

        # forward transformation: src -> dest
        extent = xform.transform(self.depts_NA.extent())


        my_map2.setExtent(extent)
        my_map2.setScale(30000000)

        my_map2.attemptMove(QgsLayoutPoint(213, 28, QgsUnitTypes.LayoutMillimeters))
        my_map2.attemptResize(QgsLayoutSize(63, 63, QgsUnitTypes.LayoutMillimeters))

        self.layout.addLayoutItem(my_map2)


        ## Ajout de la legende :
        legend = QgsLayoutItemLegend(self.layout)
        # legend.setTitle('Legende')
        legend.adjustBoxSize()
        legend.setFrameEnabled(False)
        legend.setAutoUpdateModel(False)

        root = QgsLayerTree()
        # root.addLayer(self.layer).setUseLayerName(False)
        # root.addLayer(self.layer).setName("Types de maîtrise")

        legend.updateLegend()

        legend.setLegendFilterByMapEnabled(True)
        self.layout.addItem(legend)
        legend.setLinkedMap(self.my_map1)

        layer_to_remove = self.fond
        legend.model().rootGroup().removeLayer(layer_to_remove)

        legend.attemptMove(QgsLayoutPoint(200, 99, QgsUnitTypes.LayoutMillimeters))

        # legend.setColumnCount(3)

        legend.setColumnCount(0)
        legend.setEqualColumnWidth(True)
        legend.setSplitLayer(True)


        legend.setWrapString("*")

        legend.adjustBoxSize()

        self.layout.refresh()



        ## Ajout d'un titre à la mise en page
        title = QgsLayoutItemLabel(self.layout)
        self.layout.addLayoutItem(title)

        #lorsque sites de plusieurs départements sélectionnés, on les stockes dans une liste pour afficher les n° départements dans le titre:
        code_dpt = []
        for i in self.vlayer.selectedFeatures():
            code_dpt.append(i["codesite"][:2])

        if len(self.dlg.mComboBox_4.checkedItems()) > 1:
            titre = str(', '.join(self.dlg.mComboBox.checkedItems()) + " " + str(tuple([int(x) for x in code_dpt])) )
        else:
            titre = str(', '.join(self.dlg.mComboBox.checkedItems()) + " (" + self.vlayer.selectedFeatures()[0]["codesite"][:2] + ")")

        title.setText(titre)
        title.setFont(QFont("Calibri", 16, QFont.Bold))
        title.attemptMove(QgsLayoutPoint(4.2, 5.8, QgsUnitTypes.LayoutMillimeters))
        title.adjustSizeToText()
        self.layout.addItem(title)


        ## Ajout d'un sous-titre à la mise en page
        subtitle = QgsLayoutItemLabel(self.layout)
        self.layout.addLayoutItem(subtitle)
        titre = str("Maîtrise foncière ou d'usage au " + date_du_jour)
        subtitle.setText(titre)
        subtitle.setFont(QFont("Calibri", 14))
        subtitle.attemptMove(QgsLayoutPoint(10.5, 13.5, QgsUnitTypes.LayoutMillimeters))
        subtitle.adjustSizeToText()
        self.layout.addItem(subtitle)


        ## Ajout du logo CEN NA en haut à gauche de la page
        layoutItemPicture = QgsLayoutItemPicture(self.layout)
        layoutItemPicture.setResizeMode(QgsLayoutItemPicture.Zoom)
        layoutItemPicture.setMode(QgsLayoutItemPicture.FormatRaster)
        layoutItemPicture.setPicturePath(self.plugin_path + '/logo.jpg')


        # dim_image_original = [250, 84]
        # new_dim = [i * 0.15 for i in dim_image_original]
        layoutItemPicture.attemptMove(QgsLayoutPoint(218, 5, QgsUnitTypes.LayoutMillimeters))
        layoutItemPicture.attemptResize(QgsLayoutSize(720,249, QgsUnitTypes.LayoutPixels))

        self.layout.addLayoutItem(layoutItemPicture)


        ## Ajout de l'échelle à la mise en page
        self.scalebar = QgsLayoutItemScaleBar(self.layout)
        self.scalebar.setStyle('Single Box')
        self.scalebar.setLinkedMap(self.my_map1)
        self.scalebar.applyDefaultSize()
        self.scalebar.applyDefaultSettings()

        self.scalebar.setNumberOfSegments(2)
        self.scalebar.setNumberOfSegmentsLeft(0)

        self.layout.addLayoutItem(self.scalebar)
        self.scalebar.attemptMove(QgsLayoutPoint(222,173, QgsUnitTypes.LayoutMillimeters))
        self.scalebar.setFixedSize(QgsLayoutSize(50, 15))


        # ajout de la fleche du Nord
        north = QgsLayoutItemPicture(self.layout)
        north.setPicturePath(self.plugin_path + "/NorthArrow_02.svg")
        self.layout.addLayoutItem(north)
        north.attemptResize(QgsLayoutSize(8.4, 12.5, QgsUnitTypes.LayoutMillimeters))
        north.attemptMove(QgsLayoutPoint(205,172, QgsUnitTypes.LayoutMillimeters))



        info = ["Réalisation : " + "DSI / CEN Nouvelle-Aquitaine (" + date_du_jour + ")"]
        credit_text = QgsLayoutItemLabel(self.layout)
        credit_text.setText(info[0])
        credit_text.setFont(QFont("Calibri", 11))
        self.layout.addLayoutItem(credit_text)
        credit_text.attemptMove(QgsLayoutPoint(200, 200, QgsUnitTypes.LayoutMillimeters))
        credit_text.adjustSizeToText()
        # credit_text.attemptResize(QgsLayoutSize(95, 5, QgsUnitTypes.LayoutMillimeters))


        info2 = ["Source: IGN (fond de carte), IGN (Admin Express), cadastre ETALAB, FoncierCEN"]
        credit_text2 = QgsLayoutItemLabel(self.layout)
        credit_text2.setText(info2[0])
        credit_text2.setFont(QFont("Calibri", 9))
        credit_text2.setItemRotation(-90)
        self.layout.addLayoutItem(credit_text2)
        credit_text2.attemptMove(QgsLayoutPoint(191, 204, QgsUnitTypes.LayoutMillimeters))
        credit_text2.adjustSizeToText()
        # credit_text2.attemptResize(QgsLayoutSize(150, 4, QgsUnitTypes.LayoutMillimeters))


        for sites in self.dlg.mComboBox.checkedItems():
            if self.dlg.checkBox.isChecked():
                self.vlayer.selectByExpression('"codesite"= \'{0}\''.format(sites.replace("'", "''")), QgsVectorLayer.AddToSelection)
            else :
                self.vlayer.selectByExpression('"nom_site"= \'{0}\''.format(sites.replace("'", "''")), QgsVectorLayer.AddToSelection)

        temp_layer = self.vlayer.materialize(QgsFeatureRequest().setFilterFids(self.vlayer.selectedFeatureIds()))

        surf_parcelles_site_selectionne = temp_layer.aggregate(QgsAggregateCalculator.Sum, "contenance")
        surf_ha = surf_parcelles_site_selectionne[0]
        info3 = "Surface totale maîtrisée sur le site : " + str(surf_ha) + " ha."
        credit_text3 = QgsLayoutItemLabel(self.layout)
        credit_text3.setText(info3)
        credit_text3.setFont(QFont("Calibri", 12, italic=True))
        self.layout.addLayoutItem(credit_text3)
        credit_text3.attemptMove(QgsLayoutPoint(205, 92, QgsUnitTypes.LayoutMillimeters))
        credit_text3.adjustSizeToText()
        # credit_text3.attemptResize(QgsLayoutSize(90, 8, QgsUnitTypes.LayoutMillimeters))


        # Finally add layout to the project via its manager
        self.manager.addLayout(self.layout)

        self.zoom_to_layer()

        self.echelle = self.my_map1.scale()

        self.bar_echelle_auto(self.my_map1,  self.scalebar)


    def ouverture_composeur(self):

        ###  -------------------- Automatisation de la mise en page ----------------------- ###
        if self.dlg.comboBox_3.currentText() == "Périmètres écologiques":
            iface.openLayoutDesigner(self.module_perim_eco.layout_carto_perim_eco)
        elif self.dlg.comboBox_3.currentText() == "Localisation de sites":
            iface.openLayoutDesigner(self.module_loc_generale.layout_carto_generale)
        else:
            iface.openLayoutDesigner(self.layout)

        #### Pour ajouter deuxieme carte au composer d'impression:
        ##https://gis.stackexchange.com/questions/331723/display-two-different-maps-with-different-layers-in-one-layout-in-pyqgis-proble


    def zoom_to_layer(self):

        self.layout2 = QgsProject.instance().layoutManager().layoutByName('Mise en page automatique MapCEN (MFU)').clone()
        self.dlg.graphicsView.setScene(self.layout2)


    def export(self):

        fileName = QFileDialog.getSaveFileName(None, 'Sauvegarder en jpg', '', filter='*.jpg')
        if fileName:
            dossier_sauvegarde = fileName[0]

        self.layout = QgsProject.instance().layoutManager().layoutByName('Mise en page automatique MapCEN (MFU)')

        self.layout.renderContext().setDpi(300)

        exporter = QgsLayoutExporter(self.layout)
        settings = QgsLayoutExporter.ImageExportSettings()


        result_png = exporter.exportToImage(dossier_sauvegarde, settings)

        # print(result_png)  # 0 = export réussi !

    def liste_couche_template(self):


        if self.dlg.comboBox.currentText() == "1. Modèle standard carto A4 (consolidé).qpt":
            self.dlg.lineEdit_4.setEnabled(True)
            self.dlg.mComboBox_2.setEnabled(True)
        else:
            self.dlg.lineEdit_4.setEnabled(False)
            self.dlg.mComboBox_2.setEnabled(False)



        self.dlg.mComboBox_2.clear()

        couches = []

        for lyr in QgsProject.instance().mapLayers().values():
            couches.append(lyr.name())

        self.dlg.mComboBox_2.addItems(sorted(couches))


    def chargement_qpt(self):

        project = QgsProject.instance()


        if self.dlg.comboBox.currentText() == " ":
            QMessageBox.question(iface.mainWindow(), u"Aucun template sélectionné !", "Veuillez sélectionner un modèle !", QMessageBox.Ok)

        else:

            for filename in glob.glob(self.plugin_path + "/mises_en_pages/*.qpt"):
                with open(os.path.join(os.getcwd(), filename), 'r') as f:
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    template_content = f.read()
                    doc = QDomDocument()
                    doc.setContent(template_content)
                    layout.loadFromTemplate(doc, QgsReadWriteContext(), True)
                    layout.setName(os.path.basename(filename))

                    if layout.name() == "1. Modèle standard carto A4 (consolidé).qpt":

                        ## Add map to layout
                        self.map_modele_test = QgsLayoutItemMap(layout)
                        # Charger une carte vide
                        self.map_modele_test.setRect(20, 20, 20, 20)
                        # Mettre le canvas courant comme emprise
                        self.map_modele_test.setExtent(iface.mapCanvas().extent())
                        # Position de la carte dans le composeur
                        self.map_modele_test.attemptMove(QgsLayoutPoint(6, 23, QgsUnitTypes.LayoutMillimeters))
                        # on dimensionne le rendu de la carte (pour référence la page totale est une page A4 donc 297*210)
                        self.map_modele_test.attemptResize(QgsLayoutSize(285, 145, QgsUnitTypes.LayoutMillimeters))

                        self.map_modele_test.refresh()

                        self.map_modele_test.setBackgroundColor(QColor(255, 255, 255, 255))
                        self.map_modele_test.setFrameEnabled(True)
                        layout.addLayoutItem(self.map_modele_test)
                        self.map_modele_test.setId("carte_principale")

                        ## Ajout d'un titre à la mise en page
                        title = QgsLayoutItemLabel(layout)
                        layout.addLayoutItem(title)
                        titre = self.dlg.lineEdit_2.text()
                        title.setText(titre)
                        title.setFont(QFont("Calibri", 15, QFont.Bold))
                        title.attemptMove(QgsLayoutPoint(50, 2, QgsUnitTypes.LayoutMillimeters))
                        layout.addItem(title)
                        # title.adjustSizeToText() on n'utilise plutot setFixedSize pour pouvoir centrer le titre de manière plus optimale ici
                        title.setHAlign(Qt.AlignHCenter)
                        title.setVAlign(Qt.AlignVCenter)
                        title.setFixedSize(QgsLayoutSize(225, 8, QgsUnitTypes.LayoutMillimeters))


                        ## Ajout d'un sous titre à la mise en page
                        subtitle = QgsLayoutItemLabel(layout)
                        layout.addLayoutItem(subtitle)
                        titre = self.dlg.lineEdit_3.text()
                        subtitle.setText(titre)
                        subtitle.setFont(QFont("MS Shell Dlg 2", 10))
                        subtitle.attemptMove(QgsLayoutPoint(50, 10, QgsUnitTypes.LayoutMillimeters))
                        layout.addItem(subtitle)
                        subtitle.setHAlign(Qt.AlignHCenter)
                        subtitle.setVAlign(Qt.AlignVCenter)
                        subtitle.setFixedSize(QgsLayoutSize(225, 8, QgsUnitTypes.LayoutMillimeters))


                        ## Ajout du logo CEN NA en haut à gauche de la page
                        logo = QgsLayoutItemPicture(layout)
                        logo.setResizeMode(QgsLayoutItemPicture.Zoom)
                        logo.setMode(QgsLayoutItemPicture.FormatRaster)
                        logo.attemptMove(QgsLayoutPoint(5, 4, QgsUnitTypes.LayoutMillimeters))
                        logo.setFixedSize(QgsLayoutSize(46, 16, QgsUnitTypes.LayoutMillimeters))
                        logo.setPicturePath(self.plugin_path + '/logo.jpg')
                        layout.addLayoutItem(logo)


                        ## Ajout de la legende :
                        legend = QgsLayoutItemLegend(layout)

                        legend.setId('legende_model1')
                        # legend.setTitle('Legende')
                        legend.adjustBoxSize()
                        legend.setFrameEnabled(False)
                        legend.setAutoUpdateModel(False)

                        legend.setLinkedMap(self.map_modele_test)
                        layout.addItem(legend)

                        # group_name = 'Périmètres écologiques'  # Name of a group in your legend

                        checked_items = self.dlg.mComboBox_2.checkedItems()

                        layers_to_remove = []

                        # for lyr in iface.mapCanvas().layers():
                        #     if lyr.name() not in checked_items:
                        #         layers_to_remove.append(lyr.name())

                        for lyr in project.mapLayers().values():
                            if lyr.name() not in checked_items:
                                layers_to_remove.append(lyr.name())

                        # the layer tree
                        root = project.layerTreeRoot()

                        # get legend
                        legend = [i for i in layout.items() if isinstance(i, QgsLayoutItemLegend)][0]

                        # disable auto-update
                        legend.setAutoUpdateModel(False)
                        legend.setLegendFilterByMapEnabled(True)
                        # legend model
                        model = legend.model()

                        # the root legend group
                        root_group = model.rootGroup()

                        # loop through layer names
                        for layer_name in layers_to_remove:
                            # find layer in project
                            layer = project.mapLayersByName(layer_name)[0]
                            # get layer tree layer instance of layer
                            layertreelayer = root.findLayer(layer.id())

                            # get the parent of the layer tree layer (layer tree root, or group)
                            parent = layertreelayer.parent()

                            # if the parent is a group and has a name, find it and remove the layer
                            if isinstance(parent, QgsLayerTreeGroup) and parent.name():
                                group = root_group.findGroup(parent.name())
                                group.removeLayer(layer)
                            # remove layers that are not in a group
                            else:
                                root_group.removeLayer(layer)


                        legend.setEqualColumnWidth(True)
                        legend.setSplitLayer(True)
                        legend.setColumnSpace(5)
                        legend.rstyle(QgsLegendStyle.Title).setMargin(1.5)  # 1 mm
                        legend.rstyle(QgsLegendStyle.Group).setMargin(QgsLegendStyle.Top, 3)
                        legend.rstyle(QgsLegendStyle.Subgroup).setMargin(QgsLegendStyle.Top, 3)

                        legend.adjustBoxSize()
                        layout.refresh()

                        legend.updateLegend()

                        legend.attemptMove(QgsLayoutPoint(5, 168, QgsUnitTypes.LayoutMillimeters))

                        # try:
                        #     layout_clone
                        # except:
                        #     layout_clone = QgsProject.instance().layoutManager().layoutByName(
                        #         '1. Modèle standard carto A4 (consolidé).qpt')  # je ne sais pas pourquoi il faut que je redéfinisse une variable pour layout mais autrement ça ne fonctionne pas
                        #
                        # # Retrieve width & height values of map item
                        # legend_item = [i for i in layout_clone.items() if isinstance(i, QgsLayoutItemLegend)][0]
                        # legend_height = legend_item.sizeWithUnits().height()
                        # legend_width = legend_item.sizeWithUnits().width()
                        #
                        # print(legend_height)
                        #
                        # if legend_height <= 42:
                        #     legend.setColumnCount(1)
                        # elif legend_height > 42 and legend_height <= 84:
                        #     legend.setColumnCount(2)
                        # elif legend_height > 84 and legend_height <= 126:
                        #     legend.setColumnCount(3)
                        # elif legend_height > 126 or legend_width > 195:
                        #     legend.setColumnCount(1)
                        #     QMessageBox.question(iface.mainWindow(), u"Attention !",
                        #                          "Le nombre d'éléments à intégrer à la légende est trop important pour être harmonisé automatiquement. Veuillez disposer les élements de légende manuellement",
                        #                          QMessageBox.Ok)

                        # legend.setWrapString("*")


                        ## Ajout de l'échelle à la mise en page
                        self.scalebar_qpt = QgsLayoutItemScaleBar(layout)
                        self.scalebar_qpt.setStyle('Single Box')
                        self.scalebar_qpt.setLinkedMap(self.map_modele_test)
                        self.scalebar_qpt.applyDefaultSize()
                        self.scalebar_qpt.applyDefaultSettings()

                        self.scalebar_qpt.setNumberOfSegments(2)
                        self.scalebar_qpt.setNumberOfSegmentsLeft(0)

                        layout.addLayoutItem(self.scalebar_qpt)
                        self.scalebar_qpt.attemptMove(QgsLayoutPoint(207, 183, QgsUnitTypes.LayoutMillimeters))
                        # self.scalebar_qpt.setFixedSize(QgsLayoutSize(55, 15))

                        # ajout de la fleche du Nord
                        north = QgsLayoutItemPicture(layout)
                        north.setPicturePath(self.plugin_path + "/NorthArrow_02.svg")
                        layout.addLayoutItem(north)
                        north.attemptResize(QgsLayoutSize(8.4, 12.5, QgsUnitTypes.LayoutMillimeters))
                        north.attemptMove(QgsLayoutPoint(273, 182, QgsUnitTypes.LayoutMillimeters))

                        #ajout note info:
                        info = ["Réalisation : " + "DSI / CEN Nouvelle-Aquitaine (" + date.today().strftime("%d/%m/%Y") + ")"]
                        info2 = ["Source : " + self.dlg.lineEdit_4.text()]
                        credit_text = QgsLayoutItemLabel(layout)
                        credit_text.setText(info[0])
                        credit_text.setFont(QFont("Calibri", 9))
                        credit_text.setHAlign(Qt.AlignRight)
                        credit_text.setVAlign(Qt.AlignVCenter)
                        credit_text.setItemRotation(-90)
                        credit_text2 = QgsLayoutItemLabel(layout)
                        credit_text2.setText(info2[0])
                        credit_text2.setFont(QFont("Calibri", 9))
                        credit_text2.setHAlign(Qt.AlignRight)
                        credit_text2.setVAlign(Qt.AlignVCenter)
                        layout.addLayoutItem(credit_text)
                        layout.addLayoutItem(credit_text2)
                        credit_text.attemptMove(QgsLayoutPoint(291.5, 123, QgsUnitTypes.LayoutMillimeters))
                        credit_text.attemptResize(QgsLayoutSize(100, 3.9, QgsUnitTypes.LayoutMillimeters))
                        credit_text2.attemptMove(QgsLayoutPoint(189, 168.5, QgsUnitTypes.LayoutMillimeters))
                        credit_text2.attemptResize(QgsLayoutSize(100, 3.9, QgsUnitTypes.LayoutMillimeters))

                        credit_text2.adjustSizeToText()
                        # credit_text.attemptResize(QgsLayoutSize(95, 5, QgsUnitTypes.LayoutMillimeters))


                    self.bar_echelle_auto(iface.mapCanvas(), self.scalebar_qpt)

                    existing_layout = project.layoutManager().layoutByName(layout.name())
                    if existing_layout:
                        project.layoutManager().removeLayout(existing_layout)

                    result = project.layoutManager().addLayout(layout)
                    print(result)


            fichier_mise_en_page = self.dlg.comboBox.currentText()

            layout_modifie = QgsProject.instance().layoutManager().layoutByName(fichier_mise_en_page)

            # map_item = layout_modifie.itemById("carte_principale")
            # # map_item = layout_modifie.referenceMap()
            #
            # map_item.zoomToExtent(iface.mapCanvas().extent())
            #
            iface.openLayoutDesigner(layout_modifie)

    def actualisation_mise_en_page(self):

        if self.dlg.radioButton_6.isChecked() and self.dlg.radioButton_7.isChecked():

            self.map_modele_test.attemptMove(QgsLayoutPoint(6, 23, QgsUnitTypes.LayoutMillimeters))
            self.map_modele_test.attemptResize(QgsLayoutSize(285, 145, QgsUnitTypes.LayoutMillimeters))
            map_item.attemptMove(QgsLayoutPoint(7.5, 33, QgsUnitTypes.LayoutMillimeters))
            map_item.attemptResize(QgsLayoutSize(405, 203, QgsUnitTypes.LayoutMillimeters))
            self.map_modele_test.attemptMove(QgsLayoutPoint(6, 23, QgsUnitTypes.LayoutMillimeters))
            self.map_modele_test.attemptResize(QgsLayoutSize(285, 145, QgsUnitTypes.LayoutMillimeters))
            title.attemptMove(QgsLayoutPoint(50, 2, QgsUnitTypes.LayoutMillimeters))
            title.setFixedSize(QgsLayoutSize(225, 8, QgsUnitTypes.LayoutMillimeters))
            subtitle.attemptMove(QgsLayoutPoint(50, 2, QgsUnitTypes.LayoutMillimeters))
            subtitle.setFixedSize(QgsLayoutSize(225, 8, QgsUnitTypes.LayoutMillimeters))
            logo.attemptMove(QgsLayoutPoint(5, 4, QgsUnitTypes.LayoutMillimeters))
            logo.setFixedSize(QgsLayoutSize(46, 16, QgsUnitTypes.LayoutMillimeters))
            legend.attemptMove(QgsLayoutPoint(5, 168, QgsUnitTypes.LayoutMillimeters))
            scalebar.attemptMove(QgsLayoutPoint(5, 168, QgsUnitTypes.LayoutMillimeters))

        if self.dlg.radioButton_6.isChecked() and self.dlg.radioButton_8.isChecked():
            self.map_modele_test.attemptMove(QgsLayoutPoint(10, 30, QgsUnitTypes.LayoutMillimeters))
            self.map_modele_test.attemptResize(QgsLayoutSize(250, 120, QgsUnitTypes.LayoutMillimeters))
            title.attemptMove(QgsLayoutPoint(40, 2, QgsUnitTypes.LayoutMillimeters))
            title.setFixedSize(QgsLayoutSize(200, 10, QgsUnitTypes.LayoutMillimeters))

        if self.dlg.radioButton_5.isChecked() and self.dlg.radioButton_7.isChecked():
            self.map_modele_test.attemptMove(QgsLayoutPoint(4, 20, QgsUnitTypes.LayoutMillimeters))
            self.map_modele_test.attemptResize(QgsLayoutSize(300, 150, QgsUnitTypes.LayoutMillimeters))
            title.attemptMove(QgsLayoutPoint(60, 2, QgsUnitTypes.LayoutMillimeters))
            title.setFixedSize(QgsLayoutSize(250, 12, QgsUnitTypes.LayoutMillimeters))

        if self.dlg.radioButton_5.isChecked() and self.dlg.radioButton_8.isChecked():
            self.map_modele_test.attemptMove(QgsLayoutPoint(8, 25, QgsUnitTypes.LayoutMillimeters))
            self.map_modele_test.attemptResize(QgsLayoutSize(270, 130, QgsUnitTypes.LayoutMillimeters))
            title.attemptMove(QgsLayoutPoint(45, 2, QgsUnitTypes.LayoutMillimeters))
            title.setFixedSize(QgsLayoutSize(220, 9, QgsUnitTypes.LayoutMillimeters))


    def niveau_zoom(self):

        if self.dlg.horizontalSlider.value() == 2:
            self.my_map1.setScale(self.echelle/1.8)
        elif self.dlg.horizontalSlider.value() == 1:
            self.my_map1.setScale(self.echelle/1.4)
        elif self.dlg.horizontalSlider.value() == 0:
            self.my_map1.setScale(self.echelle)
        elif self.dlg.horizontalSlider.value() == -1:
            self.my_map1.setScale(self.echelle*1.4)
        else:
            self.my_map1.setScale(self.echelle*1.8)

        self.my_map1.refresh()

        self.layout3 = QgsProject.instance().layoutManager().layoutByName('Mise en page automatique MapCEN (MFU)').clone()
        self.dlg.graphicsView.setScene(self.layout3)
        self.layout.refresh()

        self.bar_echelle_auto(self.my_map1, self.scalebar)


    def bar_echelle_auto(self, echelle, bar_echelle):

        if echelle.scale() >= 45000:
            bar_echelle.setUnits(QgsUnitTypes.DistanceKilometers)
            bar_echelle.setUnitLabel("km")
            bar_echelle.setUnitsPerSegment(1.5)
            # self.scalebar_test.setUnits(QgsUnitTypes.DistanceKilometers)
            # self.scalebar_test.setUnitLabel("km")
            # self.scalebar_test.setUnitsPerSegment(1.5)

        elif echelle.scale() >= 30000:
            bar_echelle.setUnits(QgsUnitTypes.DistanceKilometers)
            bar_echelle.setUnitLabel("km")
            bar_echelle.setUnitsPerSegment(1)
            # self.scalebar_test.setUnits(QgsUnitTypes.DistanceKilometers)
            # self.scalebar_test.setUnitLabel("km")
            # self.scalebar_test.setUnitsPerSegment(1)

        elif echelle.scale() >= 20000:
            bar_echelle.setUnits(QgsUnitTypes.DistanceKilometers)
            bar_echelle.setUnitLabel("km")
            bar_echelle.setUnitsPerSegment(0.5)
            # self.scalebar_test.setUnits(QgsUnitTypes.DistanceKilometers)
            # self.scalebar_test.setUnitLabel("km")
            # self.scalebar_test.setUnitsPerSegment(0.5)

        elif echelle.scale() >= 9000:
            bar_echelle.setUnits(QgsUnitTypes.DistanceMeters)
            bar_echelle.setUnitLabel("m")
            bar_echelle.setUnitsPerSegment(250)
            # self.scalebar_test.setUnits(QgsUnitTypes.DistanceMeters)
            # self.scalebar_test.setUnitLabel("m")
            # self.scalebar_test.setUnitsPerSegment(250)

        elif echelle.scale() >= 5000:
            bar_echelle.setUnits(QgsUnitTypes.DistanceMeters)
            bar_echelle.setUnitLabel("m")
            bar_echelle.setUnitsPerSegment(100)
            # self.scalebar_test.setUnits(QgsUnitTypes.DistanceMeters)
            # self.scalebar_test.setUnitLabel("m")
            # self.scalebar_test.setUnitsPerSegment(100)

        else:
            bar_echelle.setUnits(QgsUnitTypes.DistanceMeters)
            bar_echelle.setUnitLabel("m")
            bar_echelle.setUnitsPerSegment(50)
            # self.scalebar_test.setUnits(QgsUnitTypes.DistanceMeters)
            # self.scalebar_test.setUnitLabel("m")
            # self.scalebar_test.setUnitsPerSegment(50)


        bar_echelle.update()


    def popup_info(self):

        self.dialog = Popup()
        self.dialog.text_edit.show()

    def popup_resolution(self):

        self.dialog = OptionsWindow()
        self.dialog.show()
